// Top-level build file where you can add configuration options common to all sub-projects/modules.
import com.android.build.api.variant.AndroidComponentsExtension

buildscript {
    ext {
        buildToolsVersion = "33.0.0"
        minSdkVersion = 21
        compileSdkVersion = 33
        targetSdkVersion = 33

        // We use NDK 23 which has both M1 support and is the side-by-side NDK version from AGP.
        ndkVersion = "23.1.7779620"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:7.3.1")
        classpath("com.facebook.react:react-native-gradle-plugin")
        if (findProperty("buildReactNativeFromSource") == "true") {
          classpath("de.undercouch:gradle-download-task:5.0.1")
        }
    }
}

allprojects {
    repositories {
        maven {
            // Android JSC is installed parent dist folder
            url("$rootDir/../../dist")
        }
    }

    configurations.all {
        if (findProperty("buildReactNativeFromSource") == "true") {
            resolutionStrategy.dependencySubstitution {
                substitute(module("com.facebook.react:react-native"))
                    .using(project(":ReactAndroid"))
                    .because("Building React Native from source")
                substitute(module("com.facebook.react:react-android"))
                    .using(project(":ReactAndroid"))
                    .because("Building React Native from source")
                substitute(module("com.facebook.react:hermes-engine"))
                    .using(project(":ReactAndroid:hermes-engine"))
                    .because("Building Hermes from source")
                substitute(module("com.facebook.react:hermes-android"))
                    .using(project(":ReactAndroid:hermes-engine"))
                    .because("Building Hermes from source")
            }
        }
    }
}

// to prevent duplicated lib error, pick first of libc++_shared.so and libfbjni.so for instrumented tests
allprojects { subProject ->
    subProject.afterEvaluate {
        def androidComponents = subProject.extensions.findByType(AndroidComponentsExtension.class)
        androidComponents?.with {
            onVariants(selector().all()) {
                getAndroidTest()?.packaging?.jniLibs?.pickFirsts?.addAll([
                    "**/libc++_shared.so",
                    "**/libfbjni.so",
                ])
            }
        }
    }
}
